(function() {
  var Dom;

  Dom = require('./dom');

  module.exports = {
    init: function(state) {
      var self;
      self = this;
      this.themeSet = false;
      if (self.isLoaded('seti-syntax')) {
        atom.config.onDidChange('seti-syntax.themeColor', function(value) {
          return self.setTheme(value.newValue, value.oldValue, true);
        });
        atom.config.onDidChange('seti-syntax.dynamicColor', function(value) {
          var newColor;
          if (value.newValue) {
            newColor = atom.config.get('seti-ui.themeColor');
            return self.setTheme(newColor, false, true);
          } else {
            if (atom.config.get('seti-syntax.themeColor')) {
              newColor = atom.config.get('seti-syntax.themeColor');
            } else {
              newColor = 'default';
            }
            return self.setTheme(newColor, false, true);
          }
        });
        if (self.isLoaded('seti-ui')) {
          if (atom.config.get('seti-syntax.dynamicColor') && !this.themeSet) {
            self.setTheme(atom.config.get('seti-ui.themeColor'), false, false);
          }
          atom.config.onDidChange('seti-ui.themeColor', function(value) {
            if (atom.config.get('seti-syntax.dynamicColor')) {
              return self.setTheme(value.newValue, value.oldValue, false);
            }
          });
          self.onDeactivate('seti-ui', function() {
            if (atom.config.get('seti-syntax.dynamicColor')) {
              return self.setTheme('default', false, false);
            }
          });
        }
        if ((atom.config.get('seti-syntax.themeColor')) && !this.themeSet) {
          return self.setTheme(atom.config.get('seti-syntax.themeColor'), false, false);
        } else if (!this.themeSet) {
          return self.setTheme('default', false, false);
        }
      }
    },
    isLoaded: function(which) {
      return atom.packages.isPackageLoaded(which);
    },
    onActivate: function(which, cb) {
      return atom.packages.onDidActivatePackage(function(pkg) {
        if (pkg.name === which) {
          return cb(pkg);
        }
      });
    },
    onDeactivate: function(which, cb) {
      return atom.packages.onDidDeactivatePackage(function(pkg) {
        if (pkg.name === which) {
          return cb(pkg);
        }
      });
    },
    "package": atom.packages.getLoadedPackage('seti-syntax'),
    packageInfo: function(which) {
      return atom.packages.getLoadedPackage(which);
    },
    refresh: function() {
      var self;
      self = this;
      self["package"].deactivate();
      return setImmediate(function() {
        return self["package"].activate();
      });
    },
    setTheme: function(theme, previous, reload) {
      var fs, pkg, self, themeData;
      self = this;
      fs = require('fs');
      pkg = this["package"];
      themeData = '@import "themes/' + theme.toLowerCase() + '";';
      this.themeSet = true;
      return fs.readFile(pkg.path + '/styles/user-theme.less', 'utf8', function(err, fileData) {
        if (fileData !== themeData) {
          return fs.writeFile(pkg.path + '/styles/user-theme.less', themeData, function(err) {
            if (!err) {
              return self.refresh();
            }
          });
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
