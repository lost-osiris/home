(function() {
  var Dom, Utility;

  Dom = require('./dom');

  Utility = require('./utility');

  module.exports = {
    init: function(state) {
      var self;
      self = this;
      self.tabSize(atom.config.get('seti-ui.compactView'));
      self.hideTitleBar(atom.config.get('seti-ui.hideTitleBar'));
      self.hideDocumentTitle(atom.config.get('seti-ui.hideDocumentTitle'));
      self.hideProjectTab(atom.config.get('seti-ui.hideProjectTab'));
      self.ignoredFiles(atom.config.get('seti-ui.displayIgnored'));
      self.fileIcons(atom.config.get('seti-ui.fileIcons'));
      self.hideTabs(atom.config.get('seti-ui.hideTabs'));
      self.setTheme(atom.config.get('seti-ui.themeColor'), false, false);
      self.animate(atom.config.get('seti-ui.disableAnimations'));
      return atom.config.onDidChange('seti-ui.themeColor', function(value) {
        return self.setTheme(value.newValue, value.oldValue, true);
      });
    },
    "package": atom.packages.getLoadedPackage('seti-ui'),
    refresh: function() {
      var self;
      self = this;
      self["package"].deactivate();
      return setImmediate(function() {
        return self["package"].activate();
      });
    },
    setTheme: function(theme, previous, reload) {
      var el, fs, path, pkg, self, themeData;
      self = this;
      el = Dom.query('atom-workspace');
      fs = require('fs');
      path = require('path');
      pkg = atom.packages.getLoadedPackage('seti-ui');
      themeData = '@seti-primary: @' + theme.toLowerCase() + ';';
      themeData = themeData + '@seti-primary-text: @' + theme.toLowerCase() + '-text;';
      themeData = themeData + '@seti-primary-highlight: @' + theme.toLowerCase() + '-highlight;';
      atom.config.set('seti-ui.themeColor', theme);
      return fs.writeFile(pkg.path + '/styles/user-theme.less', themeData, function(err) {
        if (!err) {
          if (previous) {
            el.classList.remove('seti-theme-' + previous.toLowerCase());
            el.classList.add('seti-theme-' + theme.toLowerCase());
          }
          if (reload) {
            return self.refresh();
          }
        }
      });
    },
    animate: function(val) {
      return Utility.applySetting({
        action: 'addWhenFalse',
        config: 'seti-ui.disableAnimations',
        el: ['atom-workspace'],
        className: 'seti-animate',
        val: val,
        cb: this.animate
      });
    },
    tabSize: function(val) {
      return Utility.applySetting({
        action: 'addWhenTrue',
        config: 'seti-ui.compactView',
        el: ['atom-workspace'],
        className: 'seti-compact',
        val: val,
        cb: this.tabSize
      });
    },
    hideTitleBar: function(val) {
      return Utility.applySetting({
        action: 'addWhenTrue',
        config: 'seti-ui.hideTitleBar',
        el: ['atom-workspace'],
        className: 'hide-title-bar',
        val: val,
        cb: this.hideTitleBar
      });
    },
    hideDocumentTitle: function(val) {
      return Utility.applySetting({
        action: 'addWhenTrue',
        config: 'seti-ui.hideDocumentTitle',
        el: ['atom-workspace'],
        className: 'hide-document-title',
        val: val,
        cb: this.hideDocumentTitle
      });
    },
    hideProjectTab: function(val) {
      return Utility.applySetting({
        action: 'addWhenTrue',
        config: 'seti-ui.hideProjectTab',
        el: ['atom-workspace'],
        className: 'hide-project-tab',
        val: val,
        cb: this.hideProjectTab
      });
    },
    hideTabs: function(val) {
      Utility.applySetting({
        action: 'addWhenTrue',
        config: 'seti-ui.hideTabs',
        el: ['atom-workspace'],
        className: 'seti-hide-tabs',
        val: val,
        cb: this.hideTabs
      });
    },
    fileIcons: function(val) {
      Utility.applySetting({
        action: 'addWhenTrue',
        config: 'seti-ui.fileIcons',
        el: ['atom-workspace'],
        className: 'seti-icons',
        val: val,
        cb: this.fileIcons
      });
    },
    ignoredFiles: function(val) {
      return Utility.applySetting({
        action: 'addWhenFalse',
        config: 'seti-ui.displayIgnored',
        el: ['.file.entry.list-item.status-ignored', '.directory.entry.list-nested-item.status-ignored'],
        className: 'seti-hide',
        val: val,
        cb: this.ignoredFiles
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
