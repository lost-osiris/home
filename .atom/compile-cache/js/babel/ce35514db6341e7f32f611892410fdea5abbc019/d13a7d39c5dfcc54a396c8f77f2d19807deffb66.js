function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

var path = _interopRequireWildcard(_path);

// eslint-disable-next-line no-unused-vars

var _jasmineFix = require('jasmine-fix');

var _libMain = require('../lib/main');

var _libMain2 = _interopRequireDefault(_libMain);

'use babel';

var linterProvider = _libMain2['default'].provideLinter();
var lint = linterProvider.lint;

var badPath = path.join(__dirname, 'fixtures', 'bad.css');
var goodPath = path.join(__dirname, 'fixtures', 'good.css');
var invalidPath = path.join(__dirname, 'fixtures', 'invalid.css');
var emptyPath = path.join(__dirname, 'fixtures', 'empty.css');
var projectPath = path.join(__dirname, 'fixtures', 'project');
var projectBadPath = path.join(projectPath, 'files', 'badWC.css');

var emptyRulesDetails = 'Rules without any properties specified should be ' + 'removed. (empty-rules)';
var emptRulesUrl = 'https://github.com/CSSLint/csslint/wiki/Disallow-empty-rules';

describe('The CSSLint provider for Linter', function () {
  (0, _jasmineFix.beforeEach)(_asyncToGenerator(function* () {
    atom.workspace.destroyActivePaneItem();

    yield atom.packages.activatePackage('linter-csslint');
    yield atom.packages.activatePackage('language-css');
  }));

  describe('checks bad.css and', function () {
    (0, _jasmineFix.it)('verifies the first message', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(badPath);
      var messages = yield lint(editor);

      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('warning');
      expect(messages[0].excerpt).toBe('Rule is empty.');
      expect(messages[0].details).toBe(emptyRulesDetails);
      expect(messages[0].url).toBe(emptRulesUrl);
      expect(messages[0].location.file).toBe(badPath);
      expect(messages[0].location.position).toEqual([[0, 0], [0, 4]]);
    }));
  });

  describe('warns on invalid CSS', function () {
    (0, _jasmineFix.it)('verifies the message', _asyncToGenerator(function* () {
      var editor = yield atom.workspace.open(invalidPath);
      var messages = yield lint(editor);
      var details = 'This rule looks for recoverable syntax errors. (errors)';

      expect(messages.length).toBe(1);
      expect(messages[0].severity).toBe('error');
      expect(messages[0].excerpt).toBe('Unexpected token \'}\' at line 1, col 1.');
      expect(messages[0].details).toBe(details);
      expect(messages[0].url).not.toBeDefined();
      expect(messages[0].location.file).toBe(invalidPath);
      expect(messages[0].location.position).toEqual([[0, 0], [0, 1]]);
    }));
  });

  (0, _jasmineFix.it)('finds nothing wrong with a valid file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(goodPath);
    var messages = yield lint(editor);

    expect(messages.length).toBe(0);
  }));

  (0, _jasmineFix.it)('handles an empty file', _asyncToGenerator(function* () {
    var editor = yield atom.workspace.open(emptyPath);
    var messages = yield lint(editor);

    expect(messages.length).toBe(0);
  }));

  (0, _jasmineFix.it)('respects .csslintrc configurations at the project root', _asyncToGenerator(function* () {
    atom.project.addPath(projectPath);
    var editor = yield atom.workspace.open(projectBadPath);
    var messages = yield lint(editor);

    expect(messages.length).toBe(1);
    expect(messages[0].severity).toBe('error');
    expect(messages[0].excerpt).toBe('Rule is empty.');
    expect(messages[0].details).toBe(emptyRulesDetails);
    expect(messages[0].url).toBe(emptRulesUrl);
    expect(messages[0].location.file).toBe(projectBadPath);
    expect(messages[0].location.position).toEqual([[0, 0], [0, 4]]);
  }));

  describe('dynamically determines where to execute from', function () {
    (0, _jasmineFix.it)('uses the bundled version when unspecified and no local version', function () {
      var packagePath = atom.packages.resolvePackagePath('linter-csslint');
      var relativeBinPath = path.join('node_modules', '.bin', 'csslint');
      if (process.platform === 'win32') {
        relativeBinPath += '.cmd';
      }

      var foundPath = _libMain2['default'].determineExecPath('', '');
      expect(foundPath).toBe(path.join(packagePath, relativeBinPath));
    });

    (0, _jasmineFix.it)('finds a local install if it exists', function () {
      var execProjectPath = path.join(__dirname, 'fixtures', 'execProject');
      var relativeBinPath = path.join('node_modules', '.bin', 'csslint');
      if (process.platform === 'win32') {
        relativeBinPath += '.cmd';
      }

      var foundPath = _libMain2['default'].determineExecPath('', execProjectPath);
      expect(foundPath).toBe(path.join(execProjectPath, relativeBinPath));
    });

    (0, _jasmineFix.it)('trusts what the user tells it', _asyncToGenerator(function* () {
      var foundPath = _libMain2['default'].determineExecPath('foobar', '');
      expect(foundPath).toBe('foobar');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,