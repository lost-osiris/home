var _path = require('path');

'use babel';

var lint = require('../lib/main.coffee').provideLinter().lint;

var failurePath = (0, _path.join)(__dirname, 'fixtures', 'files', 'failure.scss');
var ignoredPath = (0, _path.join)(__dirname, 'fixtures', 'files', 'ignored.scss');
var passPath = (0, _path.join)(__dirname, 'fixtures', 'files', 'pass.scss');
var configFile = (0, _path.join)(__dirname, 'fixtures', 'config', '.sass-lint.yml');

describe('The sass-lint provider for Linter - scss', function () {
  beforeEach(function () {
    atom.workspace.destroyActivePaneItem();
    waitsForPromise(function () {
      atom.packages.activatePackage('linter-sass-lint');
      return atom.packages.activatePackage('language-sass');
    });
  });

  describe('checks failure.scss and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        atom.config.set('linter-sass-lint.configFile', configFile);
        return atom.workspace.open(failurePath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      var messages = lint(editor);
      expect(messages.length).toBeGreaterThan(0);
    });

    it('verifies the first message', function () {
      var messages = lint(editor);
      var slDocUrl = 'https://github.com/sasstools/sass-lint/tree/master/docs/rules/no-ids.md';
      var attributes = 'href="' + slDocUrl + '" class="badge badge-flexible sass-lint"';
      var warningMarkup = '<a ' + attributes + '>no-ids</a>';
      var warnId = ' ID selectors not allowed';

      expect(messages[0].type).toBe('Error');
      expect(messages[0].text).not.toBeDefined();
      expect(messages[0].html).toBe('' + warningMarkup + warnId);
      expect(messages[0].filePath).toBe(failurePath);
      expect(messages[0].range).toEqual([[0, 0], [0, 1]]);
    });

    it('verifies the second message', function () {
      var messages = lint(editor);
      var slDocUrl = 'https://github.com/sasstools/sass-lint/tree/master/docs/rules/no-color-literals.md';
      var attributes = 'href="' + slDocUrl + '" class="badge badge-flexible sass-lint"';
      var warningMarkup = '<a ' + attributes + '>no-color-literals</a>';
      var warnId = ' Color literals such as \'red\' should only be used in variable declarations';

      expect(messages[1].type).toBe('Warning');
      expect(messages[1].text).not.toBeDefined();
      expect(messages[1].html).toBe('' + warningMarkup + warnId);
      expect(messages[1].filePath).toBe(failurePath);
      expect(messages[1].range).toEqual([[1, 9], [1, 10]]);
    });
  });

  describe('checks pass.scss and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        atom.config.set('linter-sass-lint.configFile', configFile);
        return atom.workspace.open(passPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds nothing wrong with the valid file', function () {
      var messages = lint(editor);
      expect(messages.length).toBe(0);
    });
  });

  describe('opens ignored.scss and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        atom.config.set('linter-sass-lint.configFile', configFile);
        return atom.workspace.open(ignoredPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('ignores the file and reports no warnings', function () {
      var messages = lint(editor);
      expect(messages.length).toBe(0);
    });
  });

  describe('opens failure.scss and sets pacakage to not lint if no config file present', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        atom.config.set('linter-sass-lint.noConfigDisable', true);
        atom.config.set('linter-sass-lint.configFile', '');
        return atom.workspace.open(failurePath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it("doesn't lint the file as there's no config file present", function () {
      var messages = lint(editor);
      expect(messages.length).toBe(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,